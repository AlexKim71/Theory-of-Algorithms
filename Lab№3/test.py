def swap(arr, i, j):
    """Міняє місцями два елементи в масиві."""
    arr[i], arr[j] = arr[j], arr[i]

def sink(arr, i, n):
    """
    Процедура 'занурення' елемента вниз по купі.
    A: масив
    i: індекс поточного елемента n: розмір купи
    """
    k = i
    while True:
        j = 2 * k + 1  # Індекс лівого дочірнього елемента
        
        # Перевірка, чи існує лівий дочірній елемент
        if j >= n:
            break
        
        # Знаходимо індекс найбільшого дочірнього елемента
        if j + 1 < n and arr[j + 1] > arr[j]:
            j += 1

        # Якщо поточний елемент більший або дорівнює найбільшому дочірньому
        if arr[k] >= arr[j]:
            break
        
        # Міняємо місцями та продовжуємо занурення
        swap(arr, k, j)
        k = j

def heapsort(arr):
    """
    Алгоритм пірамідального сортування.
    """
    n = len(arr)
    print(f"Початковий масив: {arr}\n")
    
    # Фаза 1: Побудова максимальної купи
    # Починаємо з першого елемента, що має дочірні елементи. Індекс: floor(n/2) - 1
    print("--- Фаза 1: Побудова максимальної купи ---")
    
    # Початковий індекс: n // 2 - 1 = 14 // 2 - 1 = 7 - 1 = 6
    for i in range(n // 2 - 1, -1, -1):
        print(f"Занурюємо елемент з індексу {i}: {arr[i]}")
        sink(arr, i, n)
    
    print(f"\nМасив після побудови купи: {arr}\n")

    # Фаза 2: Сортування
    print("--- Фаза 2: Сортування ---")
    
    current_n = n
    for i in range(n - 1, 0, -1): # i йде від n-1 (13) до 1
        
        # Переносимо найбільший елемент (корінь) в кінець
        print(f"Крок {n - i}: Міняємо місцями корінь ({arr[0]}) та останній елемент купи ({arr[i]})")
        swap(arr, 0, i)
        
        # Зменшуємо розмір купи та відновлюємо її властивості
        current_n -= 1
        print(f"Розмір купи зменшився до {current_n}. Відновлюємо властивості купи.")
        sink(arr, 0, current_n)
        print(f"Масив на поточному кроці: {arr}")
        print("---")
        
    return arr

# Моделювання
A = [84, 64, 37, 92, 2, 98, 5, 35, 70, 52, 73, 51, 88, 47]
sorted_A = heapsort(A)
print(f"Відсортований масив: {sorted_A}")
